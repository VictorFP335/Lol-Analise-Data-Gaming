# -*- coding: utf-8 -*-
"""LOL analise.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10nZoyS4TpQVFMO9RGMHy9wFPms61V1xr
"""



import requests

# Substitua com sua chave de API
api_key = 'seu token do site do LOL'

# Endpoint para rotações de campeões
url = 'https://br1.api.riotgames.com/lol/platform/v3/champion-rotations'

# Cabeçalhos com a chave da API
headers = {
    'X-Riot-Token': api_key
}

# Fazendo a requisição
response = requests.get(url, headers=headers)

# Verifica o código de status da resposta
if response.status_code == 400:
    print("Erro 400: Solicitação mal formada. Verifique os parâmetros e o formato da URL.")
else:
    # Converte a resposta para JSON e imprime
    data = response.json()
    print(data)

import requests
import json

# Substitua com sua chave de API
api_key = 'RGAPI-933e07c9-d268-4c73-8269-894886f34993'
# URL do endpoint
url = 'https://br1.api.riotgames.com/lol/platform/v3/champion-rotations'

# Cabeçalhos com a chave da API
headers = {
    'X-Riot-Token': api_key
}

# Fazendo a requisição
response = requests.get(url, headers=headers)

# Verifica o código de status da resposta
if response.status_code == 200:
    # Converte a resposta para JSON
    data = response.json()
    print(json.dumps(data, indent=4))
else:
    print(f"Erro {response.status_code}: {response.text}")

import matplotlib.pyplot as plt
import seaborn as sns

# Dados fornecidos
data = {
    "freeChampionIds": [
        5, 26, 27, 31, 48, 50, 60, 74, 98, 112, 141, 142, 145, 161, 163, 221, 222, 526, 777, 950
    ],
    "freeChampionIdsForNewPlayers": [
        222, 254, 33, 82, 131, 350, 54, 17, 18, 37, 51, 145, 134, 89, 875, 80, 115, 91, 113, 112
    ]
}

# Calcular as interseções e diferenças
free_champions = set(data["freeChampionIds"])
new_player_champions = set(data["freeChampionIdsForNewPlayers"])

intersection = free_champions.intersection(new_player_champions)
only_free = free_champions - new_player_champions
only_new_players = new_player_champions - free_champions

# Dados para o gráfico
counts = {
    "Free Champions Only": len(only_free),
    "New Players Only": len(only_new_players),
    "Common Champions": len(intersection)
}

# Criar gráfico
plt.figure(figsize=(10, 6))

# Gráfico de Venn
sns.barplot(x=list(counts.keys()), y=list(counts.values()))
plt.title('Distribuição dos Campeões Gratuitos e para Novos Jogadores')
plt.xlabel('Categoria')
plt.ylabel('Número de Campeões')
plt.show()

import requests
import json

# Substitua com sua chave de API
api_key = 'RGAPI-933e07c9-d268-4c73-8269-894886f34993'
# URL do endpoint
url = 'https://br1.api.riotgames.com/lol/status/v4/platform-data?api_key=RGAPI-933e07c9-d268-4c73-8269-894886f34993'

# Cabeçalhos com a chave da API
headers = {
    'X-Riot-Token': api_key
}

# Fazendo a requisição
response = requests.get(url, headers=headers)

# Verifica o código de status da resposta
if response.status_code == 200:
    # Converte a resposta para JSON
    data = response.json()
    print(json.dumps(data, indent=4))
else:
    print(f"Erro {response.status_code}: {response.text}")

import matplotlib.pyplot as plt
import seaborn as sns

# Dados fornecidos
data = {
    "maintenances": [
        {
            "maintenance_status": "in_progress"
        }
    ],
    "incidents": [
        {
            "incident_severity": "info"
        },
        {
            "incident_severity": "warning"
        }
    ]
}

# Contar o número de manutenções por status
maintenance_status_counts = {}
for maintenance in data["maintenances"]:
    status = maintenance["maintenance_status"]
    if status:
        maintenance_status_counts[status] = maintenance_status_counts.get(status, 0) + 1

# Contar o número de incidentes por severidade
incident_severity_counts = {}
for incident in data["incidents"]:
    severity = incident["incident_severity"]
    if severity:
        incident_severity_counts[severity] = incident_severity_counts.get(severity, 0) + 1

# Criar gráficos
fig, ax = plt.subplots(2, 1, figsize=(10, 10))

# Gráfico de Manutenções
sns.barplot(x=list(maintenance_status_counts.keys()), y=list(maintenance_status_counts.values()), ax=ax[0])
ax[0].set_title('Número de Manutenções por Status')
ax[0].set_xlabel('Status')
ax[0].set_ylabel('Número de Manutenções')

# Gráfico de Incidentes
sns.barplot(x=list(incident_severity_counts.keys()), y=list(incident_severity_counts.values()), ax=ax[1])
ax[1].set_title('Número de Incidentes por Severidade')
ax[1].set_xlabel('Severidade')
ax[1].set_ylabel('Número de Incidentes')

plt.tight_layout()
plt.show()